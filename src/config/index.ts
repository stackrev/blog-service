import Joi from 'joi';
import fs from 'fs';
import dotenv from 'dotenv';
import { ConflictException } from '@nestjs/common';
import path from 'path';
import { AxiosRequestConfig } from 'axios';
import { Configuration } from 'log4js';

const LOGO = `
        ......................................&&.........................
        ....................................&&&..........................
        .................................&&&&............................
        ...............................&&&&..............................
        .............................&&&&&&..............................
        ...........................&&&&&&....&&&..&&&&&&&&&&&&&&&........
        ..................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..............
        ................&...&&&&&&&&&&&&&&&&&&&&&&&&&&&&.................
        .......................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&.........
        ...................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...............
        ..................&&&   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&............
        ...............&&&&&@  &&&&&&&&&&..&&&&&&&&&&&&&&&&&&&...........
        ..............&&&&&&&&&&&&&&&.&&....&&&&&&&&&&&&&..&&&&&.........
        ..........&&&&&&&&&&&&&&&&&&...&.....&&&&&&&&&&&&&...&&&&........
        ........&&&&&&&&&&&&&&&&&&&.........&&&&&&&&&&&&&&&....&&&.......
        .......&&&&&&&&.....................&&&&&&&&&&&&&&&&.....&&......
        ........&&&&&.....................&&&&&&&&&&&&&&&&&&.............
        ..........&...................&&&&&&&&&&&&&&&&&&&&&&&............
        ................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&............
        ..................&&&&&&&&&&&&&&&&&&&&&&&&&&&&..&&&&&............
        ..............&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&....&&&&&............
        ...........&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&......&&&&............
        .........&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&.........&&&&............
        .......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...........&&&&............
        ......&&&&&&&&&&&&&&&&&&&...&&&&&&...............&&&.............
        .....&&&&&&&&&&&&&&&&............................&&..............
        ....&&&&&&&&&&&&&&&.................&&...........................
        ...&&&&&&&&&&&&&&&.....................&&&&......................
        ...&&&&&&&&&&.&&&........................&&&&&...................
        ..&&&&&&&&&&&..&&..........................&&&&&&&...............
        ..&&&&&&&&&&&&...&............&&&.....&&&&...&&&&&&&.............
        ..&&&&&&&&&&&&&.................&&&.....&&&&&&&&&&&&&&...........
        ..&&&&&&&&&&&&&&&&..............&&&&&&&&&&&&&&&&&&&&&&&&.........
        ..&&.&&&&&&&&&&&&&&&&&.........&&&&&&&&&&&&&&&&&&&&&&&&&&&.......
        ...&&..&&&&&&&&&&&&.........&&&&&&&&&&&&&&&&...&&&&&&&&&&&&......
        ....&..&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...........&&&&&&&&.....
        .......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..............&&&&&&&....
        .......&&&&&.&&&&&&&&&&&&&&&&&&..&&&&&&&&...&..........&&&&&&....
        ........&&&.....&&&&&&&&&&&&&.....&&&&&&&&&&...........&..&&&&...
        .......&&&........&&&.&&&&&&&&&.....&&&&&.................&&&&...
        .......&&&...............&&&&&&&.......&&&&&&&&............&&&...
        ........&&...................&&&&&&.........................&&&..
        .........&.....................&&&&........................&&....
        ...............................&&&.......................&&......
        ................................&&......................&&.......
        .................................&&..............................
        ..................................&..............................
`;

export interface EnvConfig {
  [prop: string]: string;
}

export class ConfigService {
  private readonly envConfig: EnvConfig;

  constructor(filePath: string) {
    const config = dotenv.parse(fs.readFileSync(filePath));
    this.envConfig = this.validateInput(config);
  }

  private validateInput(envConfig: EnvConfig): EnvConfig {
    const envVarsSchema: Joi.ObjectSchema = Joi.object({
      APP_NAME: Joi.string().required(),

      API: Joi.string().required(),

      NODE_ENV: Joi.string()
        .valid(['dev', 'stage', 'pre', 'prod'])
        .default('dev'),
      PORT: Joi.number().default(3000),

      LOGS_PATH: Joi.string().required(),
      LOG_LEVEL: Joi.string().required(),

      JWTKEY: Joi.string().required()
    });

    const { error, value: validatedEnvConfig } = Joi.validate(
      envConfig,
      envVarsSchema
    );
    if (error) {
      throw new ConflictException(`Config validation`);
    }
    return validatedEnvConfig;
  }

  public get PORT(): number {
    return Number(this.envConfig.PORT);
  }
  public get ENV(): string {
    return this.envConfig.NODE_ENV;
  }
  public get JWTKEY(): string {
    return this.envConfig.JWTKEY;
  }
  public get APPNAME(): string {
    return this.envConfig.APP_NAME;
  }
  public get LOG4CONFI(): Configuration {
    return {
      appenders: {
        out: { type: 'console' },
        app: {
          type: 'dateFile',
          filename: path.join(this.envConfig.LOGS_PATH, 'CMS_LOGGER'),
          pattern: '-yyyy-MM-dd.log',
          alwaysIncludePattern: true,
          appender: {
            type: 'console'
          }
        }
      },
      categories: {
        default: {
          appenders: ['out', 'app'],
          level: this.envConfig.LOG_LEVEL || 'info'
        }
      }
    };
  }
  public get API() {
    return this.envConfig.API;
  }
  public get AXIOS_CONFIG(): AxiosRequestConfig {
    return {
      baseURL: this.API,
      timeout: 5000
    };
  }
}

const config = new ConfigService(
  path.resolve(__dirname, `${process.env.NODE_ENV}.env`)
);

export { config };
